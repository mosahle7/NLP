{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "df2fa551",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:20.630453Z",
     "iopub.status.busy": "2025-05-14T10:10:20.630064Z",
     "iopub.status.idle": "2025-05-14T10:10:22.362434Z",
     "shell.execute_reply": "2025-05-14T10:10:22.361542Z"
    },
    "papermill": {
     "duration": 1.741378,
     "end_time": "2025-05-14T10:10:22.363840",
     "exception": false,
     "start_time": "2025-05-14T10:10:20.622462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/shakspare-text/shakespeare.txt\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5374d6ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.375386Z",
     "iopub.status.busy": "2025-05-14T10:10:22.375004Z",
     "iopub.status.idle": "2025-05-14T10:10:22.378937Z",
     "shell.execute_reply": "2025-05-14T10:10:22.378159Z"
    },
    "papermill": {
     "duration": 0.011122,
     "end_time": "2025-05-14T10:10:22.380261",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.369139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7478d11",
   "metadata": {
    "papermill": {
     "duration": 0.005695,
     "end_time": "2025-05-14T10:10:22.390838",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.385143",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e23e93d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.401332Z",
     "iopub.status.busy": "2025-05-14T10:10:22.401024Z",
     "iopub.status.idle": "2025-05-14T10:10:22.404887Z",
     "shell.execute_reply": "2025-05-14T10:10:22.404119Z"
    },
    "papermill": {
     "duration": 0.010744,
     "end_time": "2025-05-14T10:10:22.406193",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.395449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "file = \"/kaggle/input/shakspare-text/shakespeare.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be2c5b49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.416524Z",
     "iopub.status.busy": "2025-05-14T10:10:22.416283Z",
     "iopub.status.idle": "2025-05-14T10:10:22.420897Z",
     "shell.execute_reply": "2025-05-14T10:10:22.420117Z"
    },
    "papermill": {
     "duration": 0.011421,
     "end_time": "2025-05-14T10:10:22.422234",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.410813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def process_data(file):\n",
    "    words = []\n",
    "    \n",
    "    with open(file, 'r') as f:\n",
    "        content = f.read()\n",
    "    content = content.lower()\n",
    "    words = re.findall(r'\\w+', content)\n",
    "    return words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e10f8205",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.432379Z",
     "iopub.status.busy": "2025-05-14T10:10:22.432135Z",
     "iopub.status.idle": "2025-05-14T10:10:22.459202Z",
     "shell.execute_reply": "2025-05-14T10:10:22.458372Z"
    },
    "papermill": {
     "duration": 0.033738,
     "end_time": "2025-05-14T10:10:22.460650",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.426912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "words = process_data(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c510db2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.471423Z",
     "iopub.status.busy": "2025-05-14T10:10:22.471171Z",
     "iopub.status.idle": "2025-05-14T10:10:22.479732Z",
     "shell.execute_reply": "2025-05-14T10:10:22.479083Z"
    },
    "papermill": {
     "duration": 0.01524,
     "end_time": "2025-05-14T10:10:22.480877",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.465637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6116"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = set(words)\n",
    "len(vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd6badad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.491699Z",
     "iopub.status.busy": "2025-05-14T10:10:22.491449Z",
     "iopub.status.idle": "2025-05-14T10:10:22.495055Z",
     "shell.execute_reply": "2025-05-14T10:10:22.494421Z"
    },
    "papermill": {
     "duration": 0.010466,
     "end_time": "2025-05-14T10:10:22.496279",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.485813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_count(words):\n",
    "    return Counter(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ba41cca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.507042Z",
     "iopub.status.busy": "2025-05-14T10:10:22.506570Z",
     "iopub.status.idle": "2025-05-14T10:10:22.516568Z",
     "shell.execute_reply": "2025-05-14T10:10:22.515922Z"
    },
    "papermill": {
     "duration": 0.017261,
     "end_time": "2025-05-14T10:10:22.518351",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.501090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "240"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts = get_count(words)\n",
    "counts['thee']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3b57aab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.531689Z",
     "iopub.status.busy": "2025-05-14T10:10:22.531394Z",
     "iopub.status.idle": "2025-05-14T10:10:22.535769Z",
     "shell.execute_reply": "2025-05-14T10:10:22.535073Z"
    },
    "papermill": {
     "duration": 0.012999,
     "end_time": "2025-05-14T10:10:22.537188",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.524189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_probs(counts):\n",
    "    total = sum(counts.values())\n",
    "    return {k: v/total for k,v in counts.items()}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d7a4db65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.551040Z",
     "iopub.status.busy": "2025-05-14T10:10:22.550658Z",
     "iopub.status.idle": "2025-05-14T10:10:22.558864Z",
     "shell.execute_reply": "2025-05-14T10:10:22.558080Z"
    },
    "papermill": {
     "duration": 0.01797,
     "end_time": "2025-05-14T10:10:22.560249",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.542279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004476442720185026"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs = get_probs(counts)\n",
    "probs['thee']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "092bdbfa",
   "metadata": {
    "papermill": {
     "duration": 0.005901,
     "end_time": "2025-05-14T10:10:22.571269",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.565368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**String Manipulation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "906970d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.582719Z",
     "iopub.status.busy": "2025-05-14T10:10:22.582233Z",
     "iopub.status.idle": "2025-05-14T10:10:22.586618Z",
     "shell.execute_reply": "2025-05-14T10:10:22.586050Z"
    },
    "papermill": {
     "duration": 0.011304,
     "end_time": "2025-05-14T10:10:22.587741",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.576437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def delete(word):\n",
    "    l = len(word)\n",
    "    splits=[]\n",
    "    splits = [[word[:i], word[i:]] for i in range(l)]\n",
    "    dels=[]\n",
    "    dels = [l+r[1:] for l,r in splits]\n",
    "    return dels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e5d2434b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.598629Z",
     "iopub.status.busy": "2025-05-14T10:10:22.598382Z",
     "iopub.status.idle": "2025-05-14T10:10:22.603367Z",
     "shell.execute_reply": "2025-05-14T10:10:22.602687Z"
    },
    "papermill": {
     "duration": 0.011887,
     "end_time": "2025-05-14T10:10:22.604610",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.592723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ans', 'cns', 'cas', 'can']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word = 'cans'\n",
    "dels = delete(word)\n",
    "dels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a5f4a22a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.615542Z",
     "iopub.status.busy": "2025-05-14T10:10:22.615292Z",
     "iopub.status.idle": "2025-05-14T10:10:22.619811Z",
     "shell.execute_reply": "2025-05-14T10:10:22.619190Z"
    },
    "papermill": {
     "duration": 0.0113,
     "end_time": "2025-05-14T10:10:22.620948",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.609648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def switch(word):\n",
    "    l = len(word)\n",
    "    swi = []\n",
    "    for i in range(l-1):\n",
    "        li = list(word)\n",
    "        li[i],li[i+1] = li[i+1], li[i]\n",
    "        swi.append(''.join(li))\n",
    "    return swi        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6d7bd961",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.632290Z",
     "iopub.status.busy": "2025-05-14T10:10:22.632018Z",
     "iopub.status.idle": "2025-05-14T10:10:22.636829Z",
     "shell.execute_reply": "2025-05-14T10:10:22.636173Z"
    },
    "papermill": {
     "duration": 0.011882,
     "end_time": "2025-05-14T10:10:22.638073",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.626191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['tea', 'eat']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swi = switch('eta')\n",
    "swi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ef6f9042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.649133Z",
     "iopub.status.busy": "2025-05-14T10:10:22.648879Z",
     "iopub.status.idle": "2025-05-14T10:10:22.653221Z",
     "shell.execute_reply": "2025-05-14T10:10:22.652589Z"
    },
    "papermill": {
     "duration": 0.011337,
     "end_time": "2025-05-14T10:10:22.654436",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.643099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def replace(word):\n",
    "    letters='abcdefghijklmnopqrstuvwxyz'\n",
    "    rep = []\n",
    "    for j in range(len(word)):\n",
    "        for l in letters:\n",
    "            if word[j]!=l:\n",
    "                w = list(word)\n",
    "                w[j]=l\n",
    "                wo = ''.join(w)\n",
    "                rep.append(wo)\n",
    "    return rep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "663601dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.665841Z",
     "iopub.status.busy": "2025-05-14T10:10:22.665541Z",
     "iopub.status.idle": "2025-05-14T10:10:22.670950Z",
     "shell.execute_reply": "2025-05-14T10:10:22.670276Z"
    },
    "papermill": {
     "duration": 0.012511,
     "end_time": "2025-05-14T10:10:22.672159",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.659648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['aan',\n",
       " 'ban',\n",
       " 'dan',\n",
       " 'ean',\n",
       " 'fan',\n",
       " 'gan',\n",
       " 'han',\n",
       " 'ian',\n",
       " 'jan',\n",
       " 'kan',\n",
       " 'lan',\n",
       " 'man',\n",
       " 'nan',\n",
       " 'oan',\n",
       " 'pan',\n",
       " 'qan',\n",
       " 'ran',\n",
       " 'san',\n",
       " 'tan',\n",
       " 'uan',\n",
       " 'van',\n",
       " 'wan',\n",
       " 'xan',\n",
       " 'yan',\n",
       " 'zan',\n",
       " 'cbn',\n",
       " 'ccn',\n",
       " 'cdn',\n",
       " 'cen',\n",
       " 'cfn',\n",
       " 'cgn',\n",
       " 'chn',\n",
       " 'cin',\n",
       " 'cjn',\n",
       " 'ckn',\n",
       " 'cln',\n",
       " 'cmn',\n",
       " 'cnn',\n",
       " 'con',\n",
       " 'cpn',\n",
       " 'cqn',\n",
       " 'crn',\n",
       " 'csn',\n",
       " 'ctn',\n",
       " 'cun',\n",
       " 'cvn',\n",
       " 'cwn',\n",
       " 'cxn',\n",
       " 'cyn',\n",
       " 'czn',\n",
       " 'caa',\n",
       " 'cab',\n",
       " 'cac',\n",
       " 'cad',\n",
       " 'cae',\n",
       " 'caf',\n",
       " 'cag',\n",
       " 'cah',\n",
       " 'cai',\n",
       " 'caj',\n",
       " 'cak',\n",
       " 'cal',\n",
       " 'cam',\n",
       " 'cao',\n",
       " 'cap',\n",
       " 'caq',\n",
       " 'car',\n",
       " 'cas',\n",
       " 'cat',\n",
       " 'cau',\n",
       " 'cav',\n",
       " 'caw',\n",
       " 'cax',\n",
       " 'cay',\n",
       " 'caz']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rep = replace('can')\n",
    "rep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "90dc8073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.683470Z",
     "iopub.status.busy": "2025-05-14T10:10:22.683239Z",
     "iopub.status.idle": "2025-05-14T10:10:22.687303Z",
     "shell.execute_reply": "2025-05-14T10:10:22.686683Z"
    },
    "papermill": {
     "duration": 0.010993,
     "end_time": "2025-05-14T10:10:22.688475",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.677482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def insert(word):\n",
    "    ins=[]\n",
    "    l=len(word)\n",
    "    letters = 'abcdefghijklmnopqrstuvwxyz'\n",
    "    for i in range(l+1):\n",
    "        for l in letters:\n",
    "            ins.append(''.join(word[:i]+l+word[i:]))\n",
    "    return ins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "01059f11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.699574Z",
     "iopub.status.busy": "2025-05-14T10:10:22.699344Z",
     "iopub.status.idle": "2025-05-14T10:10:22.704034Z",
     "shell.execute_reply": "2025-05-14T10:10:22.703303Z"
    },
    "papermill": {
     "duration": 0.011645,
     "end_time": "2025-05-14T10:10:22.705245",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.693600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ins = insert('at')\n",
    "len(ins)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69eca506",
   "metadata": {
    "papermill": {
     "duration": 0.004891,
     "end_time": "2025-05-14T10:10:22.715275",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.710384",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Combining the Edits**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e1d48c43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.726710Z",
     "iopub.status.busy": "2025-05-14T10:10:22.726459Z",
     "iopub.status.idle": "2025-05-14T10:10:22.730887Z",
     "shell.execute_reply": "2025-05-14T10:10:22.730143Z"
    },
    "papermill": {
     "duration": 0.011466,
     "end_time": "2025-05-14T10:10:22.732112",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.720646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def edit_one_letter(word, sw=True):\n",
    "    edit_one = set()\n",
    "    edit_one.update(delete(word))\n",
    "    edit_one.update(replace(word))\n",
    "    edit_one.update(insert(word))\n",
    "    if sw:\n",
    "        edit_one.update(switch(word))\n",
    "    return edit_one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e07ebe38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.743397Z",
     "iopub.status.busy": "2025-05-14T10:10:22.743164Z",
     "iopub.status.idle": "2025-05-14T10:10:22.747952Z",
     "shell.execute_reply": "2025-05-14T10:10:22.747300Z"
    },
    "papermill": {
     "duration": 0.011837,
     "end_time": "2025-05-14T10:10:22.749105",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.737268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "129"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edit_one = edit_one_letter('at')\n",
    "len(edit_one)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a7ae03af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.760779Z",
     "iopub.status.busy": "2025-05-14T10:10:22.760526Z",
     "iopub.status.idle": "2025-05-14T10:10:22.764863Z",
     "shell.execute_reply": "2025-05-14T10:10:22.764113Z"
    },
    "papermill": {
     "duration": 0.011775,
     "end_time": "2025-05-14T10:10:22.766212",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.754437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def edit_two_letters(word, sw=True):\n",
    "    edit_two = set()\n",
    "    edit_one = edit_one_letter(word, sw=sw)\n",
    "    for w in edit_one:\n",
    "        wo = edit_one_letter(w,sw=sw)\n",
    "        edit_two.update(wo)\n",
    "    return edit_two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "19189325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.778057Z",
     "iopub.status.busy": "2025-05-14T10:10:22.777749Z",
     "iopub.status.idle": "2025-05-14T10:10:22.788546Z",
     "shell.execute_reply": "2025-05-14T10:10:22.787711Z"
    },
    "papermill": {
     "duration": 0.018248,
     "end_time": "2025-05-14T10:10:22.789946",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.771698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2654\n",
      "First 10 strings:  ['', 'a', 'aa', 'aaa', 'aab', 'aac', 'aad', 'aae', 'aaf', 'aag']\n",
      "Last 10 strings:  ['zv', 'zva', 'zw', 'zwa', 'zx', 'zxa', 'zy', 'zya', 'zz', 'zza']\n"
     ]
    }
   ],
   "source": [
    "edit_two = edit_two_letters(\"a\")\n",
    "edit_two_s = sorted(list(edit_two))\n",
    "print(len(edit_two))\n",
    "print(\"First 10 strings: \",edit_two_s[:10])\n",
    "print(\"Last 10 strings: \",edit_two_s[-10:])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9092c0dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.801888Z",
     "iopub.status.busy": "2025-05-14T10:10:22.801628Z",
     "iopub.status.idle": "2025-05-14T10:10:22.806565Z",
     "shell.execute_reply": "2025-05-14T10:10:22.805897Z"
    },
    "papermill": {
     "duration": 0.012497,
     "end_time": "2025-05-14T10:10:22.807862",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.795365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_correction(word, probs, vocab, n=2):\n",
    "    suggs = []\n",
    "    n_best = []\n",
    "    suggs = ([word] if word in vocab\n",
    "             else edit_one_letter(word).intersection(vocab) or edit_two_letters(word).intersection(vocab))\n",
    "    n_best = sorted([(s,probs[s]) for s in suggs], key=lambda x: x[1], reverse=True)\n",
    "    return n_best\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "71acadbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.819835Z",
     "iopub.status.busy": "2025-05-14T10:10:22.819554Z",
     "iopub.status.idle": "2025-05-14T10:10:22.824430Z",
     "shell.execute_reply": "2025-05-14T10:10:22.823798Z"
    },
    "papermill": {
     "duration": 0.012197,
     "end_time": "2025-05-14T10:10:22.825608",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.813411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('dye', 1.865184466743761e-05)]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word = 'dye'\n",
    "get_correction(word, probs, vocab)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce841d8f",
   "metadata": {
    "papermill": {
     "duration": 0.005183,
     "end_time": "2025-05-14T10:10:22.836377",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.831194",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Minimum Edit Distance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fd5d22fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.848398Z",
     "iopub.status.busy": "2025-05-14T10:10:22.848133Z",
     "iopub.status.idle": "2025-05-14T10:10:22.854186Z",
     "shell.execute_reply": "2025-05-14T10:10:22.853514Z"
    },
    "papermill": {
     "duration": 0.013664,
     "end_time": "2025-05-14T10:10:22.855352",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.841688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def min_edit_dist(src,tar,ins=1,dele=1,rep=2):\n",
    "    m = len(src)\n",
    "    n = len(tar)\n",
    "\n",
    "    D = np.zeros((m+1, n+1),dtype=int)\n",
    "\n",
    "    for i in range(1,m+1):\n",
    "        D[i,0] = D[i-1,0]+ dele\n",
    "    for j in range(1,n+1):\n",
    "        D[0,j] = D[0,j-1] + ins\n",
    "\n",
    "    for i in range(1,m+1):\n",
    "        for j in range(1,n+1):\n",
    "            r_cost = rep\n",
    "            if src[i-1]==tar[j-1]:\n",
    "                r_cost = 0\n",
    "\n",
    "            D[i,j] = min(D[i-1,j]+dele, D[i][j-1]+ins, D[i-1,j-1]+r_cost)\n",
    "    \n",
    "    return D,D[m,n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e2b823b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.866756Z",
     "iopub.status.busy": "2025-05-14T10:10:22.866526Z",
     "iopub.status.idle": "2025-05-14T10:10:22.872449Z",
     "shell.execute_reply": "2025-05-14T10:10:22.871623Z"
    },
    "papermill": {
     "duration": 0.01298,
     "end_time": "2025-05-14T10:10:22.873630",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.860650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edit Matrix:\n",
      " [[0 1 2 3 4]\n",
      " [1 2 3 4 5]\n",
      " [2 3 4 5 6]\n",
      " [3 4 5 4 5]\n",
      " [4 5 6 5 4]]\n",
      "Minimum Edits: 4\n"
     ]
    }
   ],
   "source": [
    "src = 'play'\n",
    "tar = 'stay'\n",
    "D, min_edits = min_edit_dist(src,tar)\n",
    "print(\"Edit Matrix:\\n\",D)\n",
    "print(\"Minimum Edits:\",min_edits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3bbc6ed0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-14T10:10:22.885809Z",
     "iopub.status.busy": "2025-05-14T10:10:22.885198Z",
     "iopub.status.idle": "2025-05-14T10:10:22.909805Z",
     "shell.execute_reply": "2025-05-14T10:10:22.909031Z"
    },
    "papermill": {
     "duration": 0.031974,
     "end_time": "2025-05-14T10:10:22.911132",
     "exception": false,
     "start_time": "2025-05-14T10:10:22.879158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#</th>\n",
       "      <th>s</th>\n",
       "      <th>t</th>\n",
       "      <th>a</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>#</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   #  s  t  a  y\n",
       "#  0  1  2  3  4\n",
       "p  1  2  3  4  5\n",
       "l  2  3  4  5  6\n",
       "a  3  4  5  4  5\n",
       "y  4  5  6  5  4"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx = list(src)\n",
    "cols = list(tar)\n",
    "idx.insert(0,'#')\n",
    "cols.insert(0,'#')\n",
    "\n",
    "df = pd.DataFrame(D,index=idx, columns=cols)\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7387063,
     "sourceId": 11766752,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.455722,
   "end_time": "2025-05-14T10:10:23.334048",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-14T10:10:15.878326",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
