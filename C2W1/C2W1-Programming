{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd515ead",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:57.801200Z",
     "iopub.status.busy": "2025-05-13T16:15:57.800787Z",
     "iopub.status.idle": "2025-05-13T16:15:59.816189Z",
     "shell.execute_reply": "2025-05-13T16:15:59.815074Z"
    },
    "papermill": {
     "duration": 2.024749,
     "end_time": "2025-05-13T16:15:59.817813",
     "exception": false,
     "start_time": "2025-05-13T16:15:57.793064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/shakspare-text/shakespeare.txt\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cb193054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.830318Z",
     "iopub.status.busy": "2025-05-13T16:15:59.829824Z",
     "iopub.status.idle": "2025-05-13T16:15:59.834498Z",
     "shell.execute_reply": "2025-05-13T16:15:59.833565Z"
    },
    "papermill": {
     "duration": 0.012368,
     "end_time": "2025-05-13T16:15:59.835979",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.823611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c209857e",
   "metadata": {
    "papermill": {
     "duration": 0.00508,
     "end_time": "2025-05-13T16:15:59.847847",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.842767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5ac98598",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.859540Z",
     "iopub.status.busy": "2025-05-13T16:15:59.859233Z",
     "iopub.status.idle": "2025-05-13T16:15:59.863663Z",
     "shell.execute_reply": "2025-05-13T16:15:59.862636Z"
    },
    "papermill": {
     "duration": 0.012085,
     "end_time": "2025-05-13T16:15:59.865243",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.853158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "file = \"/kaggle/input/shakspare-text/shakespeare.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fae51fd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.877282Z",
     "iopub.status.busy": "2025-05-13T16:15:59.876870Z",
     "iopub.status.idle": "2025-05-13T16:15:59.882378Z",
     "shell.execute_reply": "2025-05-13T16:15:59.881189Z"
    },
    "papermill": {
     "duration": 0.01313,
     "end_time": "2025-05-13T16:15:59.883815",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.870685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def process_data(file):\n",
    "    words = []\n",
    "    \n",
    "    with open(file, 'r') as f:\n",
    "        content = f.read()\n",
    "    content = content.lower()\n",
    "    words = re.findall(r'\\w+', content)\n",
    "    return words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14921de7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.895580Z",
     "iopub.status.busy": "2025-05-13T16:15:59.895295Z",
     "iopub.status.idle": "2025-05-13T16:15:59.925056Z",
     "shell.execute_reply": "2025-05-13T16:15:59.924308Z"
    },
    "papermill": {
     "duration": 0.037484,
     "end_time": "2025-05-13T16:15:59.926593",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.889109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "words = process_data(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d062d189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.938453Z",
     "iopub.status.busy": "2025-05-13T16:15:59.938164Z",
     "iopub.status.idle": "2025-05-13T16:15:59.947975Z",
     "shell.execute_reply": "2025-05-13T16:15:59.947215Z"
    },
    "papermill": {
     "duration": 0.017502,
     "end_time": "2025-05-13T16:15:59.949432",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.931930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6116"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = set(words)\n",
    "len(vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4fc4c0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.961903Z",
     "iopub.status.busy": "2025-05-13T16:15:59.961585Z",
     "iopub.status.idle": "2025-05-13T16:15:59.966032Z",
     "shell.execute_reply": "2025-05-13T16:15:59.965159Z"
    },
    "papermill": {
     "duration": 0.012739,
     "end_time": "2025-05-13T16:15:59.967704",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.954965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_count(words):\n",
    "    return Counter(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "94727a85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:15:59.980414Z",
     "iopub.status.busy": "2025-05-13T16:15:59.979853Z",
     "iopub.status.idle": "2025-05-13T16:15:59.991787Z",
     "shell.execute_reply": "2025-05-13T16:15:59.991001Z"
    },
    "papermill": {
     "duration": 0.019788,
     "end_time": "2025-05-13T16:15:59.993254",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.973466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "240"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts = get_count(words)\n",
    "counts['thee']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4b7428b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.006315Z",
     "iopub.status.busy": "2025-05-13T16:16:00.005967Z",
     "iopub.status.idle": "2025-05-13T16:16:00.010984Z",
     "shell.execute_reply": "2025-05-13T16:16:00.010192Z"
    },
    "papermill": {
     "duration": 0.013875,
     "end_time": "2025-05-13T16:16:00.012528",
     "exception": false,
     "start_time": "2025-05-13T16:15:59.998653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_probs(counts):\n",
    "    total = sum(counts.values())\n",
    "    return {k: v/total for k,v in counts.items()}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4a5a50f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.024972Z",
     "iopub.status.busy": "2025-05-13T16:16:00.024650Z",
     "iopub.status.idle": "2025-05-13T16:16:00.031664Z",
     "shell.execute_reply": "2025-05-13T16:16:00.030986Z"
    },
    "papermill": {
     "duration": 0.014833,
     "end_time": "2025-05-13T16:16:00.032988",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.018155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004476442720185026"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs = get_probs(counts)\n",
    "probs['thee']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e96c8c3",
   "metadata": {
    "papermill": {
     "duration": 0.00518,
     "end_time": "2025-05-13T16:16:00.043780",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.038600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**String Manipulation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "53359182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.056603Z",
     "iopub.status.busy": "2025-05-13T16:16:00.056280Z",
     "iopub.status.idle": "2025-05-13T16:16:00.061427Z",
     "shell.execute_reply": "2025-05-13T16:16:00.060523Z"
    },
    "papermill": {
     "duration": 0.013931,
     "end_time": "2025-05-13T16:16:00.062939",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.049008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def delete(word):\n",
    "    l = len(word)\n",
    "    splits=[]\n",
    "    splits = [[word[:i], word[i:]] for i in range(l)]\n",
    "    dels=[]\n",
    "    dels = [l+r[1:] for l,r in splits]\n",
    "    return dels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "28e93bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.076096Z",
     "iopub.status.busy": "2025-05-13T16:16:00.075378Z",
     "iopub.status.idle": "2025-05-13T16:16:00.081946Z",
     "shell.execute_reply": "2025-05-13T16:16:00.080642Z"
    },
    "papermill": {
     "duration": 0.014829,
     "end_time": "2025-05-13T16:16:00.083761",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.068932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ans', 'cns', 'cas', 'can']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word = 'cans'\n",
    "dels = delete(word)\n",
    "dels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cd2435ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.096989Z",
     "iopub.status.busy": "2025-05-13T16:16:00.096603Z",
     "iopub.status.idle": "2025-05-13T16:16:00.101971Z",
     "shell.execute_reply": "2025-05-13T16:16:00.101040Z"
    },
    "papermill": {
     "duration": 0.01345,
     "end_time": "2025-05-13T16:16:00.103542",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.090092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def switch(word):\n",
    "    l = len(word)\n",
    "    swi = []\n",
    "    for i in range(l-1):\n",
    "        li = list(word)\n",
    "        li[i],li[i+1] = li[i+1], li[i]\n",
    "        swi.append(''.join(li))\n",
    "    return swi        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7ed47735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.116156Z",
     "iopub.status.busy": "2025-05-13T16:16:00.115812Z",
     "iopub.status.idle": "2025-05-13T16:16:00.121612Z",
     "shell.execute_reply": "2025-05-13T16:16:00.120901Z"
    },
    "papermill": {
     "duration": 0.0136,
     "end_time": "2025-05-13T16:16:00.122948",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.109348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['tea', 'eat']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swi = switch('eta')\n",
    "swi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8ffb790a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.135932Z",
     "iopub.status.busy": "2025-05-13T16:16:00.135647Z",
     "iopub.status.idle": "2025-05-13T16:16:00.140676Z",
     "shell.execute_reply": "2025-05-13T16:16:00.139916Z"
    },
    "papermill": {
     "duration": 0.013572,
     "end_time": "2025-05-13T16:16:00.142354",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.128782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def replace(word):\n",
    "    letters='abcdefghijklmnopqrstuvwxyz'\n",
    "    rep = []\n",
    "    for j in range(len(word)):\n",
    "        for l in letters:\n",
    "            if word[j]!=l:\n",
    "                w = list(word)\n",
    "                w[j]=l\n",
    "                wo = ''.join(w)\n",
    "                rep.append(wo)\n",
    "    return rep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "62dd4491",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.155442Z",
     "iopub.status.busy": "2025-05-13T16:16:00.155090Z",
     "iopub.status.idle": "2025-05-13T16:16:00.161311Z",
     "shell.execute_reply": "2025-05-13T16:16:00.160470Z"
    },
    "papermill": {
     "duration": 0.014245,
     "end_time": "2025-05-13T16:16:00.162608",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.148363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['aan',\n",
       " 'ban',\n",
       " 'dan',\n",
       " 'ean',\n",
       " 'fan',\n",
       " 'gan',\n",
       " 'han',\n",
       " 'ian',\n",
       " 'jan',\n",
       " 'kan',\n",
       " 'lan',\n",
       " 'man',\n",
       " 'nan',\n",
       " 'oan',\n",
       " 'pan',\n",
       " 'qan',\n",
       " 'ran',\n",
       " 'san',\n",
       " 'tan',\n",
       " 'uan',\n",
       " 'van',\n",
       " 'wan',\n",
       " 'xan',\n",
       " 'yan',\n",
       " 'zan',\n",
       " 'cbn',\n",
       " 'ccn',\n",
       " 'cdn',\n",
       " 'cen',\n",
       " 'cfn',\n",
       " 'cgn',\n",
       " 'chn',\n",
       " 'cin',\n",
       " 'cjn',\n",
       " 'ckn',\n",
       " 'cln',\n",
       " 'cmn',\n",
       " 'cnn',\n",
       " 'con',\n",
       " 'cpn',\n",
       " 'cqn',\n",
       " 'crn',\n",
       " 'csn',\n",
       " 'ctn',\n",
       " 'cun',\n",
       " 'cvn',\n",
       " 'cwn',\n",
       " 'cxn',\n",
       " 'cyn',\n",
       " 'czn',\n",
       " 'caa',\n",
       " 'cab',\n",
       " 'cac',\n",
       " 'cad',\n",
       " 'cae',\n",
       " 'caf',\n",
       " 'cag',\n",
       " 'cah',\n",
       " 'cai',\n",
       " 'caj',\n",
       " 'cak',\n",
       " 'cal',\n",
       " 'cam',\n",
       " 'cao',\n",
       " 'cap',\n",
       " 'caq',\n",
       " 'car',\n",
       " 'cas',\n",
       " 'cat',\n",
       " 'cau',\n",
       " 'cav',\n",
       " 'caw',\n",
       " 'cax',\n",
       " 'cay',\n",
       " 'caz']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rep = replace('can')\n",
    "rep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "622c6874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.175437Z",
     "iopub.status.busy": "2025-05-13T16:16:00.175080Z",
     "iopub.status.idle": "2025-05-13T16:16:00.180153Z",
     "shell.execute_reply": "2025-05-13T16:16:00.179332Z"
    },
    "papermill": {
     "duration": 0.013173,
     "end_time": "2025-05-13T16:16:00.181627",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.168454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def insert(word):\n",
    "    ins=[]\n",
    "    l=len(word)\n",
    "    letters = 'abcdefghijklmnopqrstuvwxyz'\n",
    "    for i in range(l+1):\n",
    "        for l in letters:\n",
    "            ins.append(''.join(word[:i]+l+word[i:]))\n",
    "    return ins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3aa4ec79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.194681Z",
     "iopub.status.busy": "2025-05-13T16:16:00.194410Z",
     "iopub.status.idle": "2025-05-13T16:16:00.200400Z",
     "shell.execute_reply": "2025-05-13T16:16:00.199509Z"
    },
    "papermill": {
     "duration": 0.014364,
     "end_time": "2025-05-13T16:16:00.201954",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.187590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ins = insert('at')\n",
    "len(ins)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58768687",
   "metadata": {
    "papermill": {
     "duration": 0.006164,
     "end_time": "2025-05-13T16:16:00.214453",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.208289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Combining the Edits**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed31991a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.227196Z",
     "iopub.status.busy": "2025-05-13T16:16:00.226852Z",
     "iopub.status.idle": "2025-05-13T16:16:00.232019Z",
     "shell.execute_reply": "2025-05-13T16:16:00.231156Z"
    },
    "papermill": {
     "duration": 0.01327,
     "end_time": "2025-05-13T16:16:00.233517",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.220247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def edit_one_letter(word, sw=True):\n",
    "    edit_one = set()\n",
    "    edit_one.update(delete(word))\n",
    "    edit_one.update(replace(word))\n",
    "    edit_one.update(insert(word))\n",
    "    if sw:\n",
    "        edit_one.update(switch(word))\n",
    "    return edit_one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "58984b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.246886Z",
     "iopub.status.busy": "2025-05-13T16:16:00.246578Z",
     "iopub.status.idle": "2025-05-13T16:16:00.252330Z",
     "shell.execute_reply": "2025-05-13T16:16:00.251343Z"
    },
    "papermill": {
     "duration": 0.014151,
     "end_time": "2025-05-13T16:16:00.253844",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.239693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "129"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edit_one = edit_one_letter('at')\n",
    "len(edit_one)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3aaaea2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.267152Z",
     "iopub.status.busy": "2025-05-13T16:16:00.266750Z",
     "iopub.status.idle": "2025-05-13T16:16:00.272068Z",
     "shell.execute_reply": "2025-05-13T16:16:00.271192Z"
    },
    "papermill": {
     "duration": 0.013649,
     "end_time": "2025-05-13T16:16:00.273547",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.259898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def edit_two_letters(word, sw=True):\n",
    "    edit_two = set()\n",
    "    edit_one = edit_one_letter(word, sw=sw)\n",
    "    for w in edit_one:\n",
    "        wo = edit_one_letter(w,sw=sw)\n",
    "        edit_two.update(wo)\n",
    "    return edit_two"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7b404d93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.287415Z",
     "iopub.status.busy": "2025-05-13T16:16:00.287084Z",
     "iopub.status.idle": "2025-05-13T16:16:00.299546Z",
     "shell.execute_reply": "2025-05-13T16:16:00.298723Z"
    },
    "papermill": {
     "duration": 0.020752,
     "end_time": "2025-05-13T16:16:00.301053",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.280301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2654\n",
      "First 10 strings:  ['', 'a', 'aa', 'aaa', 'aab', 'aac', 'aad', 'aae', 'aaf', 'aag']\n",
      "Last 10 strings:  ['zv', 'zva', 'zw', 'zwa', 'zx', 'zxa', 'zy', 'zya', 'zz', 'zza']\n"
     ]
    }
   ],
   "source": [
    "edit_two = edit_two_letters(\"a\")\n",
    "edit_two_s = sorted(list(edit_two))\n",
    "print(len(edit_two))\n",
    "print(\"First 10 strings: \",edit_two_s[:10])\n",
    "print(\"Last 10 strings: \",edit_two_s[-10:])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3f532c92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.314223Z",
     "iopub.status.busy": "2025-05-13T16:16:00.313899Z",
     "iopub.status.idle": "2025-05-13T16:16:00.318639Z",
     "shell.execute_reply": "2025-05-13T16:16:00.317600Z"
    },
    "papermill": {
     "duration": 0.01305,
     "end_time": "2025-05-13T16:16:00.320200",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.307150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['less']\n"
     ]
    }
   ],
   "source": [
    "print([\"less\"] or [\"more\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b420d9aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.334111Z",
     "iopub.status.busy": "2025-05-13T16:16:00.333788Z",
     "iopub.status.idle": "2025-05-13T16:16:00.339077Z",
     "shell.execute_reply": "2025-05-13T16:16:00.338407Z"
    },
    "papermill": {
     "duration": 0.013918,
     "end_time": "2025-05-13T16:16:00.340482",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.326564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_correction(word, probs, vocab, n=2):\n",
    "    suggs = []\n",
    "    n_best = []\n",
    "    suggs = ([word] if word in vocab\n",
    "             else edit_one_letter(word).intersection(vocab) or edit_two_letters(word).intersection(vocab))\n",
    "    n_best = sorted([(s,probs[s]) for s in suggs], key=lambda x: x[1], reverse=True)\n",
    "    return n_best\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f2647c88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.353698Z",
     "iopub.status.busy": "2025-05-13T16:16:00.353407Z",
     "iopub.status.idle": "2025-05-13T16:16:00.359257Z",
     "shell.execute_reply": "2025-05-13T16:16:00.358207Z"
    },
    "papermill": {
     "duration": 0.014042,
     "end_time": "2025-05-13T16:16:00.360702",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.346660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('dye', 1.865184466743761e-05)]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word = 'dye'\n",
    "get_correction(word, probs, vocab)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62dce029",
   "metadata": {
    "papermill": {
     "duration": 0.005648,
     "end_time": "2025-05-13T16:16:00.372616",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.366968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Minimum Edit Distance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1b232b2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.385488Z",
     "iopub.status.busy": "2025-05-13T16:16:00.385200Z",
     "iopub.status.idle": "2025-05-13T16:16:00.391991Z",
     "shell.execute_reply": "2025-05-13T16:16:00.391026Z"
    },
    "papermill": {
     "duration": 0.015024,
     "end_time": "2025-05-13T16:16:00.393527",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.378503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def min_edit_dist(src,tar,ins=1,dele=1,rep=2):\n",
    "    m = len(src)\n",
    "    n = len(tar)\n",
    "\n",
    "    D = np.zeros((m+1, n+1),dtype=int)\n",
    "\n",
    "    for i in range(1,m+1):\n",
    "        D[i,0] = D[i-1,0]+ dele\n",
    "    for j in range(1,n+1):\n",
    "        D[0,j] = D[0,j-1] + ins\n",
    "\n",
    "    for i in range(1,m+1):\n",
    "        for j in range(1,n+1):\n",
    "            r_cost = rep\n",
    "            if src[i-1]==tar[j-1]:\n",
    "                r_cost = 0\n",
    "\n",
    "            D[i,j] = min(D[i-1,j]+dele, D[i][j-1]+ins, D[i-1,j-1]+r_cost)\n",
    "    \n",
    "    return D,D[m,n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "809bc871",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.407415Z",
     "iopub.status.busy": "2025-05-13T16:16:00.406634Z",
     "iopub.status.idle": "2025-05-13T16:16:00.413772Z",
     "shell.execute_reply": "2025-05-13T16:16:00.412813Z"
    },
    "papermill": {
     "duration": 0.015649,
     "end_time": "2025-05-13T16:16:00.415408",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.399759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edit Matrix:\n",
      " [[0 1 2 3 4]\n",
      " [1 2 3 4 5]\n",
      " [2 3 4 5 6]\n",
      " [3 4 5 4 5]\n",
      " [4 5 6 5 4]]\n",
      "Minimum Edits: 4\n"
     ]
    }
   ],
   "source": [
    "src = 'play'\n",
    "tar = 'stay'\n",
    "D, min_edits = min_edit_dist(src,tar)\n",
    "print(\"Edit Matrix:\\n\",D)\n",
    "print(\"Minimum Edits:\",min_edits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "21e19b94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-13T16:16:00.429303Z",
     "iopub.status.busy": "2025-05-13T16:16:00.428992Z",
     "iopub.status.idle": "2025-05-13T16:16:00.454573Z",
     "shell.execute_reply": "2025-05-13T16:16:00.453759Z"
    },
    "papermill": {
     "duration": 0.033975,
     "end_time": "2025-05-13T16:16:00.456036",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.422061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#</th>\n",
       "      <th>s</th>\n",
       "      <th>t</th>\n",
       "      <th>a</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>#</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   #  s  t  a  y\n",
       "#  0  1  2  3  4\n",
       "p  1  2  3  4  5\n",
       "l  2  3  4  5  6\n",
       "a  3  4  5  4  5\n",
       "y  4  5  6  5  4"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx = list(src)\n",
    "cols = list(tar)\n",
    "idx.insert(0,'#')\n",
    "cols.insert(0,'#')\n",
    "\n",
    "df = pd.DataFrame(D,index=idx, columns=cols)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6481ca8c",
   "metadata": {
    "papermill": {
     "duration": 0.005823,
     "end_time": "2025-05-13T16:16:00.468346",
     "exception": false,
     "start_time": "2025-05-13T16:16:00.462523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7387063,
     "sourceId": 11766752,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.577089,
   "end_time": "2025-05-13T16:16:00.994945",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-13T16:15:52.417856",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
